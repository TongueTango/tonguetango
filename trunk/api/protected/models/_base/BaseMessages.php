<?php

/**
 * This is the model base class for the table "messages".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Messages".
 *
 * Columns in table "messages" available as properties of the model,
 * followed by relations of table "messages" available as properties of the model.
 *
 * @property string $id
 * @property string $user_id
 * @property string $message_type_id
 * @property string $message_header
 * @property string $message_body
 * @property string $message_path
 * @property string $create_date
 * @property string $update_date
 * @property string $delete_date
 *
 * @property MessageFavorites[] $messageFavorites
 * @property MessageRecipients[] $messageRecipients
 * @property MessageTypes $messageType
 * @property Users $user
 */
abstract class BaseMessages extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'messages';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Messages|Messages', $n);
	}

	public static function representingColumn() {
		return 'message_header';
	}

	public function rules() {
		return array(
			array('user_id, message_type_id, message_header, create_date', 'required'),
			array('update_date', 'required', 'on' => 'update'),
			array('user_id, message_type_id', 'length', 'max'=>10),
			array('message_header, message_path', 'length', 'max'=>255),
			array('message_body, delete_date', 'safe'),
			array('message_body, message_path, delete_date', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, user_id, message_type_id, message_header, message_body, message_path, create_date, update_date, delete_date', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'messageFavorites' => array(self::HAS_MANY, 'MessageFavorites', 'message_id'),
			'messageRecipients' => array(self::HAS_MANY, 'MessageRecipients', 'message_id'),
			'messageType' => array(self::BELONGS_TO, 'MessageTypes', 'message_type_id'),
			'user' => array(self::BELONGS_TO, 'Users', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'user_id' => null,
			'message_type_id' => null,
			'message_header' => Yii::t('app', 'Message Header'),
			'message_body' => Yii::t('app', 'Message Body'),
			'message_path' => Yii::t('app', 'Message Path'),
			'create_date' => Yii::t('app', 'Create Date'),
			'update_date' => Yii::t('app', 'Update Date'),
			'delete_date' => Yii::t('app', 'Delete Date'),
			'messageFavorites' => null,
			'messageRecipients' => null,
			'messageType' => null,
			'user' => null,
		);
	}

	public function beforeValidate() {
		if($this->isNewRecord) { $this->create_date = date('Y-m-d H:i:s'); }
		else { $this->update_date = date('Y-m-d H:i:s'); }

		return true;
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('message_type_id', $this->message_type_id);
		$criteria->compare('message_header', $this->message_header, true);
		$criteria->compare('message_body', $this->message_body, true);
		$criteria->compare('message_path', $this->message_path, true);
		$criteria->compare('create_date', $this->create_date, true);
		$criteria->compare('update_date', $this->update_date, true);
		$criteria->compare('delete_date', $this->delete_date, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}

	public static function get_conversation($user_id, $date=0, $target_id=null)
	{
		if( is_null($target_id) ) {
			$target_id	= Controller::$user->id; // API::user->id
		}
		if( is_null($date) ) {
			$date		= 0;
		}
		$sql = sprintf('
			SELECT
				m.id,
				m.user_id AS sender_id,
				mr.user_id AS recipient_id,
				m.message_header,
				m.message_body,
				m.message_path,
				m.create_date,
				IF(mf.id IS NULL, 0, 1) AS is_favorite
			FROM messages m
			INNER JOIN message_recipients mr
				ON mr.message_id=m.id
				AND mr.group_id IS NULL
			LEFT OUTER JOIN message_favorites mf
				ON m.id = mf.message_id
				AND mf.user_id = %1$s
			WHERE ((mr.user_id = %1$s AND m.user_id = %2$s) 
				OR (m.user_id = %1$s AND mr.user_id = %2$s))
				AND m.delete_date IS NULL
				AND m.create_date >= "%3$s"
			ORDER BY m.create_date ASC',
			$target_id,
			$user_id,
			date("Y-m-d H:i:s", $date));

		$connection=Yii::app()->db;
		$results = $connection->createCommand($sql)->queryAll();
		
		// Clean up interger values for easier reliability
		foreach( $results as $index=>$result ) {
			foreach( array('id','sender_id','recipient_id') as $key ) {
				$results[$index][$key]	= intval($result[$key]);
			}
		}
		return $results;
	}

	public static function get_conversations($date=0, $target_id=null)
	{
		if( is_null($target_id) ) {
			$target_id	= Controller::$user->id;
		}
		if( is_null($date) ) {
			$date		= 0;
		}
		$sql = sprintf('
			SELECT
				CONVERT(IF(m.user_id=%1$s,CONCAT(m.user_id,"-",mr.user_id),CONCAT(mr.user_id,"-",m.user_id)),CHAR) AS thread_id,
				IF(m.user_id=%1$s,mr.user_id,m.user_id) AS friend_id,
				0 as group_id,
				MAX(m.create_date) as create_date,
				SUM(IF(mr.`read`=0 AND mr.user_id = %1$s,1,0)) AS unread
			FROM messages m
			INNER JOIN message_recipients mr
				ON mr.message_id=m.id
				AND mr.group_id IS NULL
			WHERE ((mr.user_id = %1$s AND m.user_id != %1$s) 
				OR (m.user_id = %1$s AND mr.user_id != %1$s))
				AND m.delete_date IS NULL
				AND m.create_date >= "%2$s"
			GROUP BY thread_id
			
			UNION

			SELECT
			    CONCAT(%1$s,"-",mr.group_id) thread_id,
			    0 AS friend_id,
			    mr.group_id,
			    MAX(m.create_date) AS create_date,
			    SUM( IF(mr.`read`=0 AND mr.user_id = %1$s, 1, 0)) AS unread
			FROM messages m
			INNER JOIN message_recipients mr
			    ON mr.message_id=m.id
				AND mr.user_id = %1$s
			WHERE  mr.group_id IN (SELECT DISTINCT group_id FROM group_members WHERE user_id = %1$s)
			    AND m.delete_date IS NULL
				AND m.create_date >= "%2$s"
			GROUP BY thread_id
			
			ORDER BY create_date DESC
			',
			$target_id,
			date('Y-m-d H:i:s', $date));

		$connection=Yii::app()->db;
		$results = $connection->createCommand($sql)->queryAll();

		// Clean up interger values for easier reliability
		foreach( $results as $index=>$result ) {
			foreach( array('friend_id') as $key ) {
				$results[$index][$key]	= intval($result[$key]);
			}
		}
		return $results;
	}
}